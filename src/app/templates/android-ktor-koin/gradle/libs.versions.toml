[versions]
kotlin = "2.0.10"
kotlin_android = "2.0.10"

# KSP depends on specific Kotlin version, so it must be upgraded together with Kotlin (disabled in Renovate)
# https://repo.maven.apache.org/maven2/com/google/devtools/ksp/symbol-processing-gradle-plugin/
# https://github.com/google/ksp
kotlinSymbolProcessing = "2.0.10-1.0.24"

# Compose compiler depends on specific Kotlin version, so it must be upgraded together with Kotlin (disabled in Renovate)
# https://developer.android.com/jetpack/androidx/releases/compose-kotlin
kotlinCompilerExtensionVersion = "1.5.14"

compileSdk = "34"
minSdk = "28"

# https://developer.android.google.cn/jetpack/androidx/releases/navigation?hl=zh-cn
navigation = "2.8.0-beta06"
testLogger = "3.2.0"
# https://github.com/Kotlin/kotlinx.coroutines
coroutines = "1.8.1"
# https://github.com/square/retrofit
retrofit = "2.11.0"
converterGson = "2.11.0"
# https://github.com/square/okhttp
okhttp = "4.12.0"
# https://github.com/InsertKoinIO/koin
koin = "3.5.6"
# https://github.com/coil-kt/coil
coil = "2.7.0"
# https://developer.android.google.cn/jetpack/androidx/releases/lifecycle?hl=zh-cn
lifecycle = "2.8.4"
# https://developer.android.google.cn/jetpack/androidx/releases/room?hl=zh-cn
room = "2.6.1"
# https://github.com/Kotlin/kotlinx.serialization
serializationJson = "1.7.1"
# https://github.com/JakeWharton/retrofit2-kotlinx-serialization-converter
kotlinxSerializationConverter = "1.0.0"
# https://github.com/androidbroadcast/ViewBindingPropertyDelegate
viewBindingPropertyDelegate = "1.5.9"
# https://github.com/JakeWharton/timber
timber = "5.0.1"
# https://developer.android.google.cn/jetpack/androidx/releases/constraintlayout?hl=zh-cn
constraintLayout = "2.1.4"
# https://developer.android.google.cn/jetpack/androidx/releases/appcompat?hl=zh-cn
appCompat = "1.7.0"
# https://developer.android.google.cn/jetpack/androidx/releases/recyclerview?hl=zh-cn
recyclerView = "1.3.2"
# https://developer.android.google.cn/jetpack/androidx/releases/compose?hl=zh-cn
compose = "1.6.8"
# https://developer.android.google.cn/jetpack/androidx/releases/compose-material3?hl=zh-cn
materialCompose = "1.2.1"
# https://developer.android.google.cn/jetpack/androidx/releases/compose-material?hl=zh-cn
material = "1.12.0"
# https://airbnb.io/lottie/#/android-compose
lottie = "6.4.1"
#playCore = "1.10.3"
# https://developer.android.google.cn/kotlin/ktx?hl=en
coreKtx = "1.13.1"
fragmentKtx = "1.8.1"
# Info https://google.github.io/accompanist/flowlayout/
# Repo https://oss.sonatype.org/content/repositories/snapshots/com/google/accompanist/accompanist-flowlayout/
accompanist = "0.34.0"

# https://github.com/ktorio/ktor
ktor = "2.3.12"

spotless = "6.25.0"

detekt = "1.23.6"
androidGradlePlugin = "8.5.2"
creator = "1.0"
# add
# https://github.com/Tencent/MMKV
mmkv = "1.3.9"
# https://developer.android.google.cn/jetpack/androidx/releases/work?hl=zh-cn
work = "2.9.1"
# https://support.brother.com/g/s/es/dev/en/mobilesdk/android/index.html
brother = "4.7.2"
# https://github.com/ujizin/Camposer
camposer = "0.4.0"

# https://github.com/zxing/zxing
zxing = "3.5.2"

# https://github.com/raamcosta/compose-destinations/
composeDestinations = "2.1.0-beta11"

# Test versionsandroid-junit5-plugin-dsl
junit = "4.13.2"
androidJUnit5 = "1.10.2.0"
kluent = "1.73"
testRunner = "1.6.1"
testMonitor = "1.7.1"
mockk = "1.13.12"
espresso = "3.6.1"
coreTesting = "2.2.0"
jetbrainsKotlinJvm = "2.0.0"
ui-test = "1.6.8"
exifinterface = "1.3.7"

[libraries]
kotlin = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutines" }
retrofitCore = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
converter-gson = { module = "com.squareup.retrofit2:converter-gson", version.ref = "converterGson" }
kotlinxSerializationConverter = { module = "com.squareup.retrofit2:converter-kotlinx-serialization", version.ref = "retrofit" }
serializationJson = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serializationJson" }
# Retrofit will use okhttp 4 (it has binary capability with okhttp 3)
# See: https://square.github.io/okhttp/upgrading_to_okhttp_4/
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
okhttpInterceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okhttp" }
viewBindingPropertyDelegate = { module = "com.github.kirich1409:viewbindingpropertydelegate", version.ref = "viewBindingPropertyDelegate" }
timber = { module = "com.jakewharton.timber:timber", version.ref = "timber" }
constraintLayout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "constraintLayout" }
appCompat = { module = "androidx.appcompat:appcompat", version.ref = "appCompat" }
recyclerView = { module = "androidx.recyclerview:recyclerview", version.ref = "recyclerView" }
composeMaterial = { module = "androidx.compose.material3:material3", version.ref = "materialCompose" }
material = { module = "com.google.android.material:material", version.ref = "material" }
lottie = { module = "com.airbnb.android:lottie-compose", version.ref = "lottie" }
coil = { module = "io.coil-kt:coil-compose", version.ref = "coil" }
#playCore = { module = "com.google.android.play:core", version.ref = "playCore" }
coreKtx = { module = "androidx.core:core-ktx", version.ref = "coreKtx" }
fragmentKtx = { module = "androidx.fragment:fragment-ktx", version.ref = "fragmentKtx" }
viewmodelKtx = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycle" }
livedataKtx = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "lifecycle" }
composeUI = { module = "androidx.compose.ui:ui", version.ref = "compose" }
toolingPreview = { module = "androidx.compose.ui:ui-tooling-preview", version.ref = "compose" }
compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "compose" }
livedataRuntime = { module = "androidx.lifecycle:lifecycle-runtime-compose", version.ref = "lifecycle" }
roomKtx = { module = "androidx.room:room-ktx", version.ref = "room" }
roomRuntime = { module = "androidx.room:room-runtime", version.ref = "room" }
roomCompiler = { module = "androidx.room:room-compiler", version.ref = "room" }

## Ktor
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-android = { module = "io.ktor:ktor-client-android", version.ref = "ktor" }
ktor-client-serialization = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-client-contentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }

accompanistFlowLayout = { module = "com.google.accompanist:accompanist-flowlayout", version.ref = "accompanist" }
accompanist-permissions = { module = "com.google.accompanist:accompanist-permissions", version.ref = "accompanist" }

detektFormatting = { module = "io.gitlab.arturbosch.detekt:detekt-formatting", version.ref = "detekt" }
konsist = "com.lemonappdev:konsist:0.11.0"

## Koin
koin-android = { module = "io.insert-koin:koin-android", version.ref = "koin" }
# add
tencent-mmkv = { module = "com.tencent:mmkv", version.ref = "mmkv" }
material3-window-size = { module = "androidx.compose.material3:material3-window-size-class", version.ref = "materialCompose" }
navigation-compose = { group = "androidx.navigation", name = "navigation-compose", version.ref = "navigation" }

## Koin
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-compose = { module = "io.insert-koin:koin-androidx-compose", version.ref = "koin" }
work-manager = { module = "androidx.work:work-runtime-ktx", version.ref = "work" }

## 其它三方库
# 相机
camposer-lib = { module = "io.github.ujizin:camposer", version.ref = "camposer" }
# 自动生成代码
creator = { module = "uii.ang:creator", version.ref = "creator" }
# 二维码操作
zxing-core = { module = "com.google.zxing:core", version.ref = "zxing" }
# 注解导航
compose-destinations = { module = "io.github.raamcosta.compose-destinations:core", version.ref = "composeDestinations" }
compose-destinations-ksp = { module = "io.github.raamcosta.compose-destinations:ksp", version.ref = "composeDestinations" }

# Test dependencies
junit = { module = "junit:junit", version.ref = "junit" }
testCoroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
kluent = { module = "org.amshove.kluent:kluent-android", version.ref = "kluent" }
testMonitor = { module = "androidx.test:monitor", version.ref = "testMonitor" }
testRunner = { module = "androidx.test:runner", version.ref = "testRunner" }
testRules = { module = "androidx.test:rules", version.ref = "testRunner" }
espresso = { module = "androidx.test.espresso:espresso-core", version.ref = "espresso" }
espresso-contrib = { module = "androidx.test.espresso:espresso-contrib", version.ref = "espresso" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
coreTesting = { module = "androidx.arch.core:core-testing", version.ref = "coreTesting" }
junitJupiterApi = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit" }
junitJupiterEngine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit" }
compose-ui-test = { module = "androidx.compose.ui:ui-test", version.ref = "ui-test" }
compose-ui-test-junit4 = { module = "androidx.compose.ui:ui-test-junit4", version.ref = "ui-test" }
compose-ui-test-manifest = { module = "androidx.compose.ui:ui-test-manifest", version.ref = "ui-test" }
exifinterface = { group = "androidx.exifinterface", name = "exifinterface", version.ref = "exifinterface" }

[bundles]
ktor = ["ktor-client-core", "ktor-client-android", "ktor-client-serialization", "ktor-client-contentNegotiation",
    "ktor-client-logging", "ktor-client-okhttp"]
retrofit = ["retrofitCore", "kotlinxSerializationConverter", "serializationJson", "okhttp", "okhttpInterceptor", "converter-gson"]
koin = ["koin-android", "koin-core", "koin-compose"]
compose = ["composeUI", "toolingPreview", "compose-ui-tooling", "lottie", "coil"]
lifecycle = ["viewmodelKtx", "livedataKtx", "livedataRuntime"]
navigation = ["navigation-compose"]
room = ["roomKtx", "roomRuntime"]
test = ["coreTesting", "espresso", "espresso-contrib", "compose-ui-test", "compose-ui-test-junit4"]
android-test = ["compose-ui-test-manifest"]
jetpack = ["work-manager", "accompanist-permissions"]
third-pack = ["camposer-lib", "creator",
    "zxing-core", "compose-destinations"]

[plugins]
# Search Gradle Plugins https://plugins.gradle.org/
android-application = { id = "com.android.application", version.ref = "androidGradlePlugin" }
android-library = { id = "com.android.library", version.ref = "androidGradlePlugin" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin_android" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kotlin-symbolProcessing = { id = "com.google.devtools.ksp", version.ref = "kotlinSymbolProcessing" }
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
spotless = { id = "com.diffplug.spotless", version.ref = "spotless" }
#safeArgs = { id = "androidx.navigation.safeargs.kotlin", version.ref = "navigation" }
junit5Android = { id = "de.mannodermaus.android-junit5", version.ref = "androidJUnit5" }
testLogger = { id = "com.adarshr.test-logger", version.ref = "testLogger" }
jetbrains-kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "jetbrainsKotlinJvm" }
